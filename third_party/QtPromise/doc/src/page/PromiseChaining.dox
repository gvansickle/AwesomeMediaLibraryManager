namespace QtPromise {

/*!

\page page_promiseChaining %Promise Chaining

\brief This page gives a guide on how to use promise chaining.

\tableofcontents


\section page_promiseChaining_basics Basics
%Promise chaining is a mechanism to attach actions to the outcome of an asynchronous operation.
The main interface for this is the Promise::then() method. It can take three parameters:
- The \p resolvedCallback is called when the Promise (to be more accurate: its Deferred) is resolved.
This signals that the asynchronous operation was successful.
- The \p rejectedCallback is called when the Promise (its Deferred) is rejected.
This signals that the asynchronous operation failed.
- The \p notifiedCallback is called when the Promise (its Deferred) reports progress of the
asynchronous operation.

All three callbacks need to accept one QVariant parameter.
- The parameter passed to the \p resolvedCallback is the return value of the asynchronous operation.
This can also be an invalid QVariant() in case the asynchronous operation does have a return value.
- The parameter passed to the \p rejectedCallback provides details why the asynchronous operation
failed.
- The parameter passed to the \p notifiedCallback represents a progress update of the asynchronous
operation.

The return value of Promise::then() is a _new_ Promise which is resolved, rejected or notified
depending on the return type and value of the callbacks. Read the next section for more information
about this.


\section page_promiseChaining_chainFlow Controlling the Flow of the Chain
There are cases where it is possible to recover from a failed asynchronous operation or where the
asynchronous operation was successful but for some reason, it is not possible to continue working
successfully with the result.

Another common use case is that multiple asynchronous operations need to be executed one after the
other. In such a cases, each asynchronous operation needs to delay the further operations until
the result is available. Additionally, each step in that chain can fail even if the steps before
were successful. 

To handle all such cases with promise chaining, Promise::then() returns a _new_ Promise which is
resolved, rejected or notified depending on the return type and value of the callbacks:
The callbacks can either return `void`, a QVariant or a Promise::Ptr.

\subsection page_promiseChaining_voidCallbacks Void and nullptr Callbacks
If a callback returns `void` or is \c nullptr, the Promise returned by Promise::then() is resolved,
rejected or notified exactly like the original Promise (the one on which \ref Promise::then()
"then()" was called). This means:
- If the original Promise is resolved and the \p resolvedCallback returns `void` or is \c nullptr,
the Promise returned by Promise::then() is also resolved with the same value as the original Promise.
- Similarly, if the original Promise is rejected or notified and the corresponding callbacks return
`void` or is \c nullptr, the returned Promise is rejected or notified with the same value as the
original Promise.

\subsection page_promiseChaining_qVariantCallbacks QVariant Callbacks
If a callback returns a QVariant, the Promise returned by Promise::then() is resolved or notified
with that QVariant value. This means:
- If the original Promise is resolved and the \p resolvedCallback returns a QVariant, the Promise
returned by Promise::then() is also resolved with that returned QVariant value.
- If the original Promise is notified and the \p notifiedCallback returns a QVariant, the Promise
returned by Promise::then() is notified with that returned QVariant value.
- If the original Promise is rejected and the \p rejectedCallback returns a QVariant, the Promise
returned by Promise::then() is **resolved** with that returned QVariant value.
This allows handling failed asynchronous operations.

\subsection page_promiseChaining_promiseCallbacks Promise Callbacks
If a callback returns a Promise::Ptr, the Promise returned by Promise::then() is resolved, rejected
and notified exactly like the Promise returned by the callback. This means:
- If the original Promise is resolved or rejected and the corresponding callback returns a Promise::Ptr,
the Promise returned by Promise::then() is resolved, rejected and notified when the Promise
returned by the callback is resolved, rejected and notified.
This allows both recovering and failing the chain.
- If the original Promise is notified and the \p notifiedCallback returns a Promise::Ptr,
the Promise returned by Promise::then() is notified when the Promise returned by the callback is
notified.

It should be noted that the notifications of the Promise returned by Promise::then() can be coming
from different sources:
- Before the original Promise is resolved or rejected, the notifications come either from the
original Promise if the \p notifiedCallback returns `void`, from the \p notifiedCallback if
it returns QVariant or from the Promise returned by the \p notifiedCallback.
- After the original Promise is resolved or rejected, the notifications come from the Promise
returned by the corresponding callback. In case those callbacks do not return a Promise, the
Promise returned by Promise::then() will be resolved or rejected directly so it cannot no longer 
receive notifications anyway.

\warning Do not trigger any action which could lead to the deletion of the Promise directly
from a callback. Defer such actions to the event loop. See \ref page_ownership for more information.

\section page_promiseChaining_commonPatterns Common Patterns
This section shows examples of a few common patterns of promise chaining.

\subsection page_promiseChaining_exampleChainAsync Chaining multiple asynchronous Operations
\code
using namespace QtPromise;

this->m_resultPromise = startFirstAsyncOperation()
->then([this](const QVariant& firstResult) -> Promise::Ptr {
	// Start a second async operation which depends
	// on the result of the first async operation
	return startSecondAsyncOperation(firstResult);
})
->then([this](const QVariant& secondResult) -> Promise::Ptr {
	// Start a third async operation which depends
	// on the result of the second async operation
	return startThirdAsyncOperation(secondResult);
})
->then([this](const QVariant& thirdResult) {
	// Do something with the result of the third
	// async operation
	doSomething(thirdResult);
}, [this](const QVariant& reason) {
	// This rejectedCallback catches rejections from all
	// steps since the other rejectedCallbacks return void.

	// One of the asynchronous operations failed :-(
	if (reason.canConvert<QString>())
		logError(reason.toString());
});
\endcode
Chaining multiple asynchronous operations using promises has several advantages:
- It avoids highly nested code.
- It keeps the construction of the sequence in one function instead of splitting it
accross multiple slots.
- It allows handling errors for each step as well for the whole chain in the same manner.


\subsection page_promiseChaining_exampleSwitchigTracks Switching between resolved and rejected tracks
\code
using namespace QtPromise;

this->m_resultPromise = startAsyncOperation()
->then([this](const QVariant& value) -> Promise::Ptr {
	QVariant someResult = doSomething(value);
	if (someResult.isValid())
		return Promise::createResolved(someResult);
	else
		// Something failed
		return Promise::createRejected(SomethingException());
}, [this](const QVariant& reason) -> Promise::Ptr {
	QVariant recoveredResult = tryToRecover(reason);
	if (recoveredResult.isValid())
		return Promise::createResolved(recoveredResult);
	else
		// Could not recover from failed async operation
		return Promise::createRejected(RecoverException());
})
->then([this](const QVariant& value) {
	// value can be "someResult" or "recoveredResult"
	doMore(value);
}, [this](const QVariant& reason) {
	// reason can be SomethingException or RecoverException
	handleRejection(reason);
});
\endcode
The chain of callbacks can be thought of as two different tracks: the resolved track
and the rejected track. Returning QVariant or a resolved Promise::Ptr from a callback
makes the chain continue on the resolved track or switch from the rejected to the resolved
track (recover from errors). Returning a rejected Promise::Ptr makes the chain continue on
the rejected track or switch from the resolved to the rejected track (report errors).

\subsection page_promiseChaining_exampleCatchAll Catch all
\code
using namespace QtPromise;

this->m_resultPromise = startAsyncOperation()
// Attach action (chain step 1)
->then([this](const QVariant& value) -> Promise::Ptr {
	bool somethingSucceeded = doSomething(value);
	if (somethingSucceeded)
		return Promise::createResolved(QString("Something succeeded! :-)"));
	else
		return Promise::createRejected(QString("Something failed! :-("));
})
// Catch all (chain step 2)
->then(nullptr, [this](const QVariant& reason) -> void {
	if (reason.canConvert<QString>())
		logError(reason.toString());
});
\endcode
The logging of the error message is put into another chain step.
This has the advantage that it will log both the rejection reason from the Promise returned
by `startAsyncOperation()` and the rejection reason from the attached action.
If the logging would be placed in the \p rejectedCallback of the first chain step,
then it would only log the rejection reason from `startAsyncOperation()`.


*/

} // namespace QtPromise