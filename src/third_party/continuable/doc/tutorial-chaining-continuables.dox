/*
  Copyright(c) 2015 - 2018 Denis Blank <denis.blank at outlook dot com>

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files(the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions :

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

namespace cti {
/** \page tutorial-chaining-continuables Chaining continuables
\brief Explains how to chain multiple \ref continuable_base objects together.

\tableofcontents

\section tutorial-chaining-continuables-then Using then and results

A \ref continuable_base provides various methods to continue the asynchronous
call hierarchy. The most important method therefor is
\ref continuable_base::then which changes the object through attaching a
result handler:

\code{.cpp}
http_request("github.com")
  .then([] (std::string result) {
    // Do something...
  });
\endcode

A new \ref continuable_base is created which result depends on the return type
of the handler. For instance it is possible to return plain values or the next
\ref continuable_base to continue the call hierarchy.
See \ref continuable_base::then for details.

\code{.cpp}
mysql_query("SELECT `id`, `name` FROM `users`")
  .then([](ResultSet users) {
    // Return the next continuable to process ...
    return mysql_query("SELECT `id` name FROM `sessions`");
  })
  .then([](ResultSet sessions) {
    // ... or pass multiple values to the next callback using tuples or pairs ...
    return std::make_tuple(std::move(sessions), true);
  })
  .then([](ResultSet sessions, bool is_ok) {
    // ... or pass a single value to the next callback ...
    return 10;
  })
  .then([](auto value) {
    //     ^^^^ Templated callbacks are possible too
  })
  // ... you may even pass continuables to the `then` method directly:
  .then(mysql_query("SELECT * FROM `statistics`"))
  .then([](ResultSet result) {
    // ...
  });
\endcode

\subsection tutorial-chaining-continuables-then-partial Making use of partial argument application

Callbacks passed to \link continuable_base::then then \endlink are only called
with the amount of arguments that are accepted.

\code{.cpp}
(http_request("github.com") && read_file("entries.csv"))
  .then([] {
    // ^^^^^^ The original signature was <std::string, Buffer>,
    // however, the callback is only invoked with the amount of
    // arguments it's accepting.
  });
\endcode

This makes it possible to attach a callback accepting nothing to every
\ref continuable_base.

\subsection tutorial-chaining-continuables-then-executors Assigning a specific executor to then

Dispatching a callback through a specific executor is a common usage scenario and supported through the second argument of \link continuable_base::then then\endlink:

\code{.cpp}
auto executor = [](auto&& work) {
  // Dispatch the work here, store it for later
  // invocation or move it to another thread.
  std::forward<decltype(work)>(work)();
};

read_file("entries.csv")
  .then([](Buffer buffer) {
    // ...
  }, executor);
//   ^^^^^^^^
\endcode

The supplied `work` callable may be stored and moved for later usage
on a possible different thread or execution context.

\note If you are intending to change the context the asynchronous task is
      running, you need to specify this inside the function that
      supplies the \ref continuable_base through moving the \ref promise_base.
\code{.cpp}
auto http_request(std::string url) {
  return cti::make_continuable<std::string>(
    [url = std::move(url)](auto&& promise) {
      std::async([promise = std::forward<decltype(promise)>(promise)]
                  () mutable {
                    promise.set_value("<html> ... </html>");
                  });
    });
}
\endcode

\section tutorial-chaining-continuables-fail Using fail and exceptions

Asynchronous exceptions are supported too. Exceptions that were set through
\ref promise_base::set_exception are forwarded to the first available registered
handler that was attached through \ref continuable_base::fail :

\code{.cpp}
http_request("github.com")
  .then([] (std::string result) {
    // Is never called if an error occurs
  })
  .fail([] (std::exception_ptr ptr) {
    try {
      std::rethrow_exception(ptr);
    } catch(std::exception const& e) {
      // Handle the exception or error code here
    }
  });
\endcode

Multiple handlers are allowed to be registered, however the asynchronous call
hierarchy is aborted after the first called fail handler and only the closest
handler below is called.

\note Retrieving a `std::exception_ptr` from a current exception
      may be done as shown below:
  \code{.cpp}
  auto do_sth() {
    return cti::make_continuable<void>([=] (auto&& promise) {
      try {
        // Usually the exception is thrown by another expression
        throw std::exception{};
      } catch(...) {
        promise.set_exception(std::current_exception());
      }
    });
  }
  \endcode

Continuable also supports error codes automatically if exceptions are disabled.
Additionally it is possible to specify a custom error type through defining.

\code{.cpp}
http_request("github.com")
  .then([] (std::string result) {
    // Is never called if an error occurs
  })
  .fail([] (std::error_condition error) {
    error.value();
    error.category();
  });
\endcode

The \ref error_type will be `std::exception_ptr` except if any of the
following definitions is defined:
- `CONTINUABLE_WITH_NO_EXCEPTIONS`: Define this to use `std::error_condition`
  as \ref error_type and to disable exception support.
  When exceptions are disabled this definition is set automatically.
- `CONTINUABLE_WITH_CUSTOM_ERROR_TYPE`:  Define this to use a user defined
  error type.

\attention By default unhandled exceptions or errors will trigger
           a built-in trap that causes abnormal application shutdown.
           In order to prevent this and to allow unhandled errors
           define `CONTINUABLE_WITH_UNHANDLED_EXCEPTIONS`.

\section tutorial-chaining-continuables-next Using next to handle all paths

Sometimes it's required to provide a continuation and error handler from the
same object. In order to avoid overloading conflicts there is the special
method \ref continuable_base::next provided.
The exception path overload is marked through the \ref dispatch_error_tag :

\code{.cpp}
struct handle_all_paths {
  void operator() (std::string result) {
    // ...
  }
  void operator() (cti::dispatch_error_tag, cti::error_type) {
    // ...
  }
};

// ...

http_request("github.com")
  .next(handle_all_paths{});
\endcode

*/
}
